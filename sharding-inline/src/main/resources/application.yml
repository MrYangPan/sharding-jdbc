logging:
  level:
    ROOT: INFO
    shardingsphere.demo: DEBUG
    shardingsphere.demo.mapper: debug
server:
  port: 8100
mybatis:
  mapper-locations: classpath:mapper/*.xml
#  type-aliases-package: springboot.sharding.entity
#  config-location: classpath:mybatis-config.xml
#spring:
#  profiles:
#    active: sharding
sharding:
  jdbc:
#   配置该数据源之后，无需配置springboot数据源
    datasource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.151.128:3306/demo_ds_0?useUnicode=true&characterEncoding=utf8&useSSL=false
        username: root
        password: 123456

      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.151.128:3306/demo_ds_1?useUnicode=true&characterEncoding=utf8&useSSL=false
        username: root
        password: 123456

#   sharing-sphere配置
    config:
#     分库分表
      sharding:
#       默认库策略
        default-database-strategy:
          inline:
#           分片键
            sharding-column: user_id
#           算法表达式
            algorithm-expression: ds$->{user_id % 2}
#       根据表，配置相应策略
        tables:
          t_order:
#           实际数据节点
            actual-data-nodes: ds$->{0..1}.t_order
            table-strategy:
              inline:
                sharding-column: order_id
                algorithm-expression: ds$->{0..1}.t_order
#           主键生成列名
#            key-generator-column-name: id
          t_order_item:
#           实际数据节点
            actual-data-nodes: ds$->{0..1}.t_order_item
            table-strategy:
              inline:
                sharding-column: order_item_id
                algorithm-expression: ds$->{0..1}.t_order_item
#           主键生成列名
#            key-generator-column-name: id
        props:
          sql:
            show: true